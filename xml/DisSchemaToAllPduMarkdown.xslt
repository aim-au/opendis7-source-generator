<?xml version="1.0" encoding="UTF-8"?>
<!--
    title       : DisSchemaToAllPduMarkdown.xslt
    created     : 21 August 2021
    creator     : Don Brutzman
    description : Example template stylesheet to process DIS schema and convert selected information to text
    reference   : DisPduSurvey.md
    reference   : https://www.w3.org/TR/xslt
    identifier  : TODO/DisSchemaToAllPduMarkdown.xslt
    license     : license.html
-->

<!-- TODO authors can edit this example to customize all transformation rules -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"
                xmlns:xs ="http://www.w3.org/2001/XMLSchema"
	            xmlns:fn ="http://www.w3.org/2005/xpath-functions">
	<!--  extension-element-prefixes="xs" -->
    <xsl:output method="text"/> <!-- output methods:  xml html text -->
    
    <!-- ======================================================= -->
    
    <xsl:template match="/"> <!-- process root of input document -->
        
        <xsl:message>
            <xsl:text>found </xsl:text>
            <xsl:value-of select="count(/xs:schema/xs:element[ends-with(@name,'Pdu')][not(ends-with(@name,'RPdu'))][not(@name = 'SEESPdu')][not(@name = 'IFFPdu')][not(@name = 'TSPIPdu')])"/>
            <xsl:text> Pdu elements</xsl:text>
        </xsl:message>
        <!-- process elements and comments
        <xsl:apply-templates select="/xs:schema/xs:element[ends-with(@name,'Pdu')]">
            <xsl:sort select="@name" order="ascending"/>
        </xsl:apply-templates> -->
        <xsl:text># IEEE Distributed Interactive Simulation (DIS) version 7 PDU Assessment</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        
        <xsl:variable name="javadocPdusUrl">
            <xsl:text>https://savage.nps.edu/open-dis7-java/javadoc/edu/nps/moves/dis7/pdus/</xsl:text>
        </xsl:variable>
        <xsl:variable name="schemadocPdusUrl">
            <xsl:text>https://savage.nps.edu/open-dis7-java/xml/SchemaDocumentation/DIS_7_2012.autogenerated_</xsl:text>
        </xsl:variable>
        
        <xsl:variable name="tableRowDivider">
            <xsl:text>|-------------------|:-----:|:----------|:---------:|:---------:|:-------------------|</xsl:text>
            <xsl:text>&#10;</xsl:text>
        </xsl:variable>
        <xsl:variable name="tableHeader">
                  <!--| PDU type and PDUs | ID    |  Assess    |zAssess    | Javadoc   | Schemadoc | IEEE Standard |-->
            <xsl:text>| PDU type and PDUs | ID    | Assess    |           |           | IEEE Standard 1278.1-2012 |</xsl:text>
            <xsl:text>&#10;</xsl:text>
            <xsl:value-of select="$tableRowDivider"/>
        </xsl:variable>
        
        <xsl:for-each select="/xs:schema/xs:complexType[ends-with(@name,'PduType')][not(@name = 'PduType')]">
            <xsl:sort select="xs:integer(xs:annotation/xs:appinfo/xs:attribute[@name='id']/@fixed)" order="ascending"/>
            
            <xsl:variable name="complexTypeName" select="@name"/>
            <xsl:variable name="pdusWithMatchingComplexType" 
                        select="/xs:schema/xs:element[ends-with(@name,'Pdu')][not(string-length(xs:annotation/xs:appinfo/xs:attribute[@name='aliasFor']/@fixed) > 0)]
                                //xs:extension[@base = $complexTypeName]"/>
            <xsl:variable name="idValue"         select="xs:annotation/xs:appinfo/xs:attribute[@name='id']/@fixed"/>
            
            <xsl:value-of select="$tableHeader"/>
            <xsl:text>| </xsl:text>
            <xsl:text>_</xsl:text>
            <xsl:value-of select="$complexTypeName"/>
            <xsl:text>_ |</xsl:text>
            <xsl:text> </xsl:text>
            <xsl:value-of select="$idValue"/>
            <!--
            <xsl:value-of select="count($pdusWithMatchingComplexType)"/>
            <xsl:text> PDUs</xsl:text>
            -->
            <!--
            <xsl:value-of select="count($pdusWithMatchingComplexType)"/>
            <xsl:text> PDUs</xsl:text>
            -->
            <xsl:text> |</xsl:text>
            <xsl:text> [Javadoc](</xsl:text>
            <xsl:value-of select="$javadocPdusUrl"/>
            <xsl:choose>
                <xsl:when test="ends-with($complexTypeName,'Type')">
                    <xsl:value-of select="substring-before($complexTypeName,'Type')"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$complexTypeName"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>.html)</xsl:text>
            <xsl:text> |</xsl:text>
            <xsl:text> [Schemadoc](</xsl:text>
            <xsl:value-of select="$schemadocPdusUrl"/>
            <xsl:value-of select="$complexTypeName"/>
            <xsl:text>.html)</xsl:text>
            <xsl:text> |</xsl:text>
            <xsl:text> </xsl:text>
            <!-- typically includes spec paragraph -->
            <xsl:value-of select="normalize-space(xs:annotation/xs:appinfo)"/>
            <xsl:text> |</xsl:text>
            <xsl:text>&#10;</xsl:text>
            
            <xsl:for-each select="$pdusWithMatchingComplexType">
                <xsl:sort select="xs:integer(ancestor::xs:element/xs:annotation/xs:appinfo/xs:attribute[@name='id'  ]/@fixed)" order="ascending"/>

                <xsl:variable name="ancestorElement" select="ancestor::xs:element"/>
                <xsl:variable name="pduName"         select="$ancestorElement/@name"/>
                <xsl:variable name="aliasName"       select="//xs:element[xs:annotation/xs:appinfo/xs:attribute[@name='aliasFor'][@fixed = $pduName]]/@name"/>
                <xsl:variable name="idValue"         select="$ancestorElement/xs:annotation/xs:appinfo/xs:attribute[@name='id'  ]/@fixed"/>
                
                <xsl:text>| </xsl:text>
                <xsl:value-of select="position()"/>
                <xsl:text>. </xsl:text>
                <xsl:value-of select="$pduName"/>
                <xsl:if test="(string-length($aliasName) > 0)">
                    <xsl:text disable-output-escaping="yes"> &lt;br /&gt; </xsl:text>
                    <xsl:value-of select="$aliasName"/>
                </xsl:if>
                <xsl:text> |</xsl:text>
                <xsl:text> </xsl:text>
                <xsl:value-of select="$idValue"/>
                <xsl:text> |</xsl:text>
                <xsl:text disable-output-escaping="yes"> &lt;ul&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes"> &lt;li&gt;</xsl:text>
                <xsl:text> - [ ] relevant?</xsl:text><!-- empty checkbox -->
                <xsl:text disable-output-escaping="yes"> &lt;/li&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes"> &lt;li&gt;</xsl:text>
                <xsl:text> - [ ] in use?</xsl:text><!-- empty checkbox -->
                <xsl:text disable-output-escaping="yes"> &lt;/li&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes"> &lt;/ul&gt;</xsl:text>
                <xsl:text> |</xsl:text>
                <xsl:text> [Javadoc](</xsl:text>
                <xsl:value-of select="$javadocPdusUrl"/>
                <xsl:value-of select="$pduName"/>
                <xsl:text>.html)</xsl:text>
                <xsl:text> |</xsl:text>
                <xsl:text> [Schemadoc](</xsl:text>
                <xsl:value-of select="$schemadocPdusUrl"/>
                <xsl:value-of select="$pduName"/>
                <xsl:text>.html)</xsl:text>
                <xsl:text> |</xsl:text>
                <xsl:text> </xsl:text>
                <!-- typically includes spec paragraph -->
                <xsl:value-of select="normalize-space($ancestorElement/xs:annotation/xs:appinfo)"/>
                <xsl:text> |</xsl:text>
                <xsl:text>&#10;</xsl:text>
            </xsl:for-each><!-- PDU -->
            <xsl:text>&#10;</xsl:text>
            
        </xsl:for-each><!-- PDU family -->
            
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="*"> <!-- rule to process each element -->
        
        <xsl:message>
            <xsl:value-of select="local-name()"/>
            <xsl:text> </xsl:text>
            <xsl:value-of select="@name"/>
        </xsl:message>
        <!-- common initial processing for each element -->
        <xsl:text disable-output-escaping="yes">&lt;</xsl:text>
        <xsl:value-of select="@name"/>
        
        <xsl:apply-templates select="@*"/> <!-- process attributes for this element -->
        
        <xsl:apply-templates select="xs:element"/> <!-- recurse on child elements -->
        
        <!-- common final processing for each element -->
        <xsl:text disable-output-escaping="yes">/&gt;</xsl:text><!-- end element -->
        <xsl:text>&#10;</xsl:text>
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="@*"> <!-- rule to process each attribute -->
        
        <!-- common processing for each attribute -->
        <xsl:text> </xsl:text>
        <xsl:value-of select="local-name()"/>
        <xsl:text>='</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text>'</xsl:text>
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="comment()"> <!-- rule to process each comment -->
    
        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        
    </xsl:template>

</xsl:stylesheet>
